// <auto-generated />
using System;
using EduTrackOne.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduTrackOne.Persistence.Migrations
{
    [DbContext(typeof(EduTrackOneDbContext))]
    [Migration("20250506162142_Rowversion")]
    partial class Rowversion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduTrackOne.Domain.Classes.Classe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdEnseignantPrincipal")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdEnseignantPrincipal");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("IdEnseignantPrincipal");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Eleves.Eleve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoImmatricule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoImmatricule");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion");

                    b.HasKey("Id");

                    b.ToTable("Eleves", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.EnseignantsPrincipaux.EnseignantPrincipal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EnseignantsPrincipaux", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Inscriptions.Inscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdClasse")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdClasse");

                    b.Property<Guid>("IdEleve")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdEleve");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("IdClasse");

                    b.HasIndex("IdEleve");

                    b.ToTable("Inscriptions", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Matieres.Matiere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Matieres", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Notes.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateExamen")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateExamen");

                    b.Property<Guid>("IdInscription")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdInscription");

                    b.Property<Guid>("IdMatiere")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdMatiere");

                    b.HasKey("Id");

                    b.HasIndex("IdInscription");

                    b.ToTable("Notes", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Presences.Presence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<Guid>("IdInscription")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdInscription");

                    b.Property<int>("Periode")
                        .HasColumnType("int")
                        .HasColumnName("Periode");

                    b.HasKey("Id");

                    b.HasIndex("IdInscription");

                    b.ToTable("Presences", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Utilisateurs.Utilisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifiant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Identifiant");

                    b.Property<string>("MotDePasseHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MotDePasseHash");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs", (string)null);
                });

            modelBuilder.Entity("EduTrackOne.Domain.Classes.Classe", b =>
                {
                    b.HasOne("EduTrackOne.Domain.EnseignantsPrincipaux.EnseignantPrincipal", "EnseignantPrincipal")
                        .WithMany("Classes")
                        .HasForeignKey("IdEnseignantPrincipal")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("EduTrackOne.Domain.Classes.AnneeScolaire", "AnneeScolaire", b1 =>
                        {
                            b1.Property<Guid>("ClasseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AnneeScolaire");

                            b1.HasKey("ClasseId");

                            b1.ToTable("Classes");

                            b1.WithOwner()
                                .HasForeignKey("ClasseId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Classes.NomClasse", "Nom", b1 =>
                        {
                            b1.Property<Guid>("ClasseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nom");

                            b1.HasKey("ClasseId");

                            b1.ToTable("Classes");

                            b1.WithOwner()
                                .HasForeignKey("ClasseId");
                        });

                    b.Navigation("AnneeScolaire")
                        .IsRequired();

                    b.Navigation("EnseignantPrincipal");

                    b.Navigation("Nom")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Eleves.Eleve", b =>
                {
                    b.OwnsOne("EduTrackOne.Domain.Eleves.Adresse", "Adresse", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CodePostal")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CodePostal");

                            b1.Property<string>("Rue")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Rue");

                            b1.Property<string>("Ville")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Ville");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.DateNaissance", "DateNaissance", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateNaissance");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.Email", "EmailParent", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("email");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.NomComplet", "NomComplet", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Nom")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nom");

                            b1.Property<string>("Prenom")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Prenom");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.Telephone", "Tel1", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Tel1");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.Telephone", "Tel2", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Tel2");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.Sexe", "Sexe", b1 =>
                        {
                            b1.Property<Guid>("EleveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Sexe");

                            b1.HasKey("EleveId");

                            b1.ToTable("Eleves");

                            b1.WithOwner()
                                .HasForeignKey("EleveId");
                        });

                    b.Navigation("Adresse")
                        .IsRequired();

                    b.Navigation("DateNaissance")
                        .IsRequired();

                    b.Navigation("EmailParent")
                        .IsRequired();

                    b.Navigation("NomComplet")
                        .IsRequired();

                    b.Navigation("Sexe")
                        .IsRequired();

                    b.Navigation("Tel1")
                        .IsRequired();

                    b.Navigation("Tel2");
                });

            modelBuilder.Entity("EduTrackOne.Domain.EnseignantsPrincipaux.EnseignantPrincipal", b =>
                {
                    b.OwnsOne("EduTrackOne.Domain.Eleves.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EnseignantPrincipalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("EnseignantPrincipalId");

                            b1.ToTable("EnseignantsPrincipaux");

                            b1.WithOwner()
                                .HasForeignKey("EnseignantPrincipalId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.NomComplet", "NomComplet", b1 =>
                        {
                            b1.Property<Guid>("EnseignantPrincipalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Nom")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nom");

                            b1.Property<string>("Prenom")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Prenom");

                            b1.HasKey("EnseignantPrincipalId");

                            b1.ToTable("EnseignantsPrincipaux");

                            b1.WithOwner()
                                .HasForeignKey("EnseignantPrincipalId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("NomComplet")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Inscriptions.Inscription", b =>
                {
                    b.HasOne("EduTrackOne.Domain.Classes.Classe", "Classe")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdClasse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrackOne.Domain.Eleves.Eleve", "Eleve")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdEleve")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EduTrackOne.Domain.Inscriptions.DateInscriptionPeriode", "Periode", b1 =>
                        {
                            b1.Property<Guid>("InscriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DateDebut")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateDebut");

                            b1.Property<DateTime?>("DateFin")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateFin");

                            b1.HasKey("InscriptionId");

                            b1.ToTable("Inscriptions");

                            b1.WithOwner()
                                .HasForeignKey("InscriptionId");
                        });

                    b.Navigation("Classe");

                    b.Navigation("Eleve");

                    b.Navigation("Periode")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Matieres.Matiere", b =>
                {
                    b.OwnsOne("EduTrackOne.Domain.Matieres.NomMatiere", "Nom", b1 =>
                        {
                            b1.Property<Guid>("MatiereId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nom");

                            b1.HasKey("MatiereId");

                            b1.ToTable("Matieres");

                            b1.WithOwner()
                                .HasForeignKey("MatiereId");
                        });

                    b.Navigation("Nom")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Notes.Note", b =>
                {
                    b.HasOne("EduTrackOne.Domain.Inscriptions.Inscription", "Inscription")
                        .WithMany("Notes")
                        .HasForeignKey("IdInscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EduTrackOne.Domain.Notes.CommentaireEvaluation", "Commentaire", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Commentaire");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Notes.ValeurNote", "Valeur", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("EstAbsent")
                                .HasColumnType("bit");

                            b1.Property<double?>("Value")
                                .HasColumnType("float")
                                .HasColumnName("Valeur");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.Navigation("Commentaire");

                    b.Navigation("Inscription");

                    b.Navigation("Valeur")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Presences.Presence", b =>
                {
                    b.HasOne("EduTrackOne.Domain.Inscriptions.Inscription", "Inscription")
                        .WithMany("Presences")
                        .HasForeignKey("IdInscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EduTrackOne.Domain.Presences.StatutPresence", "Statut", b1 =>
                        {
                            b1.Property<Guid>("PresenceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Statut");

                            b1.HasKey("PresenceId");

                            b1.ToTable("Presences");

                            b1.WithOwner()
                                .HasForeignKey("PresenceId");
                        });

                    b.Navigation("Inscription");

                    b.Navigation("Statut")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Utilisateurs.Utilisateur", b =>
                {
                    b.OwnsOne("EduTrackOne.Domain.Utilisateurs.RoleUtilisateur", "Role", b1 =>
                        {
                            b1.Property<Guid>("UtilisateurId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Valeur")
                                .HasColumnType("int")
                                .HasColumnName("Role");

                            b1.HasKey("UtilisateurId");

                            b1.ToTable("Utilisateurs");

                            b1.WithOwner()
                                .HasForeignKey("UtilisateurId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Utilisateurs.StatutUtilisateur", "Statut", b1 =>
                        {
                            b1.Property<Guid>("UtilisateurId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Statut");

                            b1.HasKey("UtilisateurId");

                            b1.ToTable("Utilisateurs");

                            b1.WithOwner()
                                .HasForeignKey("UtilisateurId");
                        });

                    b.OwnsOne("EduTrackOne.Domain.Eleves.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UtilisateurId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UtilisateurId");

                            b1.ToTable("Utilisateurs");

                            b1.WithOwner()
                                .HasForeignKey("UtilisateurId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Role")
                        .IsRequired();

                    b.Navigation("Statut")
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrackOne.Domain.Classes.Classe", b =>
                {
                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("EduTrackOne.Domain.Eleves.Eleve", b =>
                {
                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("EduTrackOne.Domain.EnseignantsPrincipaux.EnseignantPrincipal", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("EduTrackOne.Domain.Inscriptions.Inscription", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Presences");
                });
#pragma warning restore 612, 618
        }
    }
}
